from aiogram import types
from aiogram.dispatcher import FSMContext

from bot import dp, database_controller

# Filters
from filters.permission_filter import HasPermission

# States
from states import *


# GetPassword
@dp.message_handler(HasPermission(), text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–æ–ª—å")
async def get_password_message(message: types.Message):
    await GetPasswordStatesGroup.get_service.set()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –ø–∞—Ä–æ–ª—å")


@dp.message_handler(HasPermission(), state=GetPasswordStatesGroup.get_service)
async def reply_with_a_password_message(message: types.Message, state: FSMContext):
    try:
        data = database_controller.get_from_accounts("service", message.from_user.id, message.text)

        if not data:
            await dp.bot.send_message(chat_id=message.chat.id, text="–£–≤—ã, —Ç–∞–∫–∏—Ö –∞–∫–∫–∞–Ω—É—Ç–æ–≤ —É –º–µ–Ω—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç :O")
            return await state.finish()

        text = "–í–æ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã: \n"

        for item in data:
            item_text = f"\nüõ†: {item['service']}\n" \
                        f"üë§: {item['login']}\n" \
                        f"üîë: {item['password']}"
            text = text + item_text + "\n"

        await dp.bot.send_message(chat_id=message.chat.id, text=text)

    except Exception as e:
        await dp.bot.send_message(chat_id=message.from_user.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ :(")
    finally:
        await state.finish()


# DeleteAccount
@dp.message_handler(HasPermission(), text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def get_service_and_login_to_delete_message(message: types.Message):
    await DeleteAccountStatesGroup.get_service_and_login.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏ –ª–æ–≥–∏–Ω (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª), "
                        "–∏ —è —É–¥–∞–ª—é –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ù–ê–í–°–ï–ì–î–ê (–Ω–µ—Ç, —Ö–µ—Ö... –ò–ª–∏ –¥–∞ :>)")


@dp.message_handler(HasPermission(), state=DeleteAccountStatesGroup.get_service_and_login)
async def delete_account_and_reply_message(message: types.Message, state: FSMContext):
    try:
        text = message.text.split(" ")
        service = text[0]
        login = None

        if len(text) >= 2:
            login = text[1]

        amount_of_records = database_controller.delete_account(message.from_user.id, service, login)

        if amount_of_records == 0:
            await dp.bot.send_message(chat_id=message.from_user.id, text="–¢–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, —É–≤—ã :<")
        else:
            await dp.bot.send_message(chat_id=message.from_user.id, text=f"–£—Ä–∞, —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {amount_of_records} –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        await dp.bot.send_message(chat_id=message.from_user.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç \n:__(")
    finally:
        await state.finish()
