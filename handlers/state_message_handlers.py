from aiogram import types
from aiogram.dispatcher import FSMContext

from bot import dp, database_controller

# Filters
from filters.permission_filter import HasPermission

# States
from states import *


# GetPassword
@dp.message_handler(HasPermission(), text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–æ–ª—å")
async def get_password_message(message: types.Message):
    await GetPasswordStatesGroup.get_service.set()
    await message.reply("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –∏ —è –ø—Ä–∏—à–ª—é –≤–∞–º –ø–∞—Ä–æ–ª—å")


@dp.message_handler(HasPermission(), state=GetPasswordStatesGroup.get_service)
async def reply_with_a_password_message(message: types.Message, state: FSMContext):
    try:
        data = database_controller.get_from_accounts("service", message.from_user.id, message.text)

        if not data:
            await dp.bot.send_message(chat_id=message.chat.id, text="–£–≤—ã, —Ç–∞–∫–∏—Ö –∞–∫–∫–∞–Ω—É—Ç–æ–≤ —É –º–µ–Ω—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç :O")
            return await state.finish()

        text = "–í–æ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã: \n"

        for item in data:
            item_text = f"\nüõ†: {item['service']}\n" \
                        f"üë§: {item['login']}\n" \
                        f"üîë: {item['password']}"
            text = text + item_text + "\n"

        await dp.bot.send_message(chat_id=message.chat.id, text=text)

    except Exception as e:
        await dp.bot.send_message(chat_id=message.from_user.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ :(")
    finally:
        await state.finish()
